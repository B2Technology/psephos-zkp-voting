import { PublicKey, type PublicKeyJSON } from "@psephos/elgamal";
import type { IElection } from "../../src/types/index.ts";
import { BallotFactory } from "../../src/ballot/index.ts";

const election: IElection = {
  cast_url:
    "http://localhost:8000/helios/elections/10e130ca-fcb1-11ef-838c-524d690e78c8/cast",
  description: "desc F",
  frozen_at: "2025-03-10 09:17:30.538954",
  name: "name F",
  openreg: false,
  questions: [
    {
      answer_urls: ["", ""],
      answers: ["op 01", "op 02"],
      choice_type: "approval",
      max: 1,
      min: 0,
      question: "Demo 01",
      randomize_answer_order: false,
      result_type: "absolute",
      short_name: "Demo 01",
      tally_type: "homomorphic",
    },
  ],
  short_name: "FODAX",
  use_voter_aliases: false,
  uuid: "10e130ca-fcb1-11ef-838c-524d690e78c8",
  voters_hash: null,
  voting_ends_at: "2032-06-17 12:00:00",
  voting_starts_at: "2025-01-13 12:00:00",
};

const pkJSON: PublicKeyJSON = {
  g: "14887492224963187634282421537186040801304008017743492304481737382571933937568724473847106029915040150784031882206090286938661464458896494215273989547889201144857352611058572236578734319505128042602372864570426550855201448111746579871811249114781674309062693442442368697449970648232621880001709535143047913661432883287150003429802392229361583608686643243349727791976247247948618930423866180410558458272606627111270040091203073580238905303994472202930783207472394578498507764703191288249547659899997131166130259700604433891232298182348403175947450284433411265966789131024573629546048637848902243503970966798589660808533",
  p: "16328632084933010002384055033805457329601614771185955389739167309086214800406465799038583634953752941675645562182498120750264980492381375579367675648771293800310370964745767014243638518442553823973482995267304044326777047662957480269391322789378384619428596446446984694306187644767462460965622580087564339212631775817895958409016676398975671266179637898557687317076177218843233150695157881061257053019133078545928983562221396313169622475509818442661047018436264806901023966236718367204710755935899013750306107738002364137917426595737403871114187750804346564731250609196846638183903982387884578266136503697493474682071",
  q: "61329566248342901292543872769978950870633559608669337131139375508370458778917",
  y: "8786218558501237770443507455523477774166153318866880417994321227697991637756858753480246778649131126057614587771598657970054620729256176587906351196360815981876383189390889384744211120208022380755255381018444052987384958025383024364077666542715042749437672181139571523513714807140322907966413380992099228575124593289180407912265516866870130237595234013916784733727582026429797008403797410873301597467727257221269374968371895772095797919555256187100399339795524639071323131347717216128252710866559886692786786509147976592677290074878311474625951116743655631261200352059498050400100988058627811826346259778754985333515",
};

const publicKey = PublicKey.fromJSON(pkJSON);

Deno.test("BallotFactory", async () => {
  const protocol = BallotFactory.ElGamal(election, publicKey);
  protocol.setAnswers(0, ["op 01"]);

  const ballot = await protocol.generateAuditable();
  console.log(ballot);
});
// TODO simular sem quantidade max
// TODO simular sem quantidade max=1
// TODO simular sem quantidade max=2
